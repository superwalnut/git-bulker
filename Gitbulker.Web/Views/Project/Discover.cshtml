@model IEnumerable<GitRepoViewModel>

@{
    ViewData["Title"] = "Discover Repositories";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Repositories</h1>

<p>
    Discover repositories
</p>
<table class="table">
    <thead>
        <tr class="table-primary">
            <th>
                <input type="checkbox" />
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FriendlyName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LocalCommitCount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LocalLastCommitTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MainBranchFriendlyName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HasPendingChanges)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TrackedDetail)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>
                <input type="checkbox" />
            </td>
            <td>
                <button class="btn btn-link btn-sm" data-toggle="popover" data-content="@item.Path"><i class="fas fa-info-circle"></i></button>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FriendlyName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LocalCommitCount)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LocalLastCommitTime)
                <br />
                @Html.DisplayFor(modelItem => item.LocalLastCommitter)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MainBranchFriendlyName)
            </td>
            <td>
                @if (item.HasPendingChanges)
                {
                    <i class="fas fa-edit"></i> <span>(@Html.DisplayFor(modelItem => item.PendingChangesCount))</span>
                }
                else
                {
                    <i class="fas fa-check-circle"></i>
                }
            </td>
            <td>
                @switch (item.TrackedDetail)
                {
                    case Gitbulker.Model.Models.TrackedDetail.Ahead:
                        <span>&#8593; @Html.DisplayFor(modelItem => item.AheadBy)</span>
                        break;
                    case Gitbulker.Model.Models.TrackedDetail.Behind:
                        <span>&#8595; @Html.DisplayFor(modelItem => item.BehindBy)</span>
                        break;
                    case Gitbulker.Model.Models.TrackedDetail.Same:
                        <span>-</span>
                        break;
                }                
            </td>    
        </tr>
        }
    </tbody>
</table>
